<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address_NullOrEmpty" xml:space="preserve">
    <value>Address string may not be null or empty</value>
  </data>
  <data name="Arguments_UnsupportedType" xml:space="preserve">
    <value>Unsupported arguemnt type '{0}'</value>
  </data>
  <data name="Bundle_InvalidBundleMessageLength" xml:space="preserve">
    <value>Invalid bundle message length</value>
  </data>
  <data name="Bundle_InvalidIdent" xml:space="preserve">
    <value>Invalid bundle ident '{0}'</value>
  </data>
  <data name="Bundle_InvalidMessageHeader" xml:space="preserve">
    <value>Invalid bundle message header</value>
  </data>
  <data name="Bundle_InvalidTimestamp" xml:space="preserve">
    <value>Invalid bundle timestamp '{0}'</value>
  </data>
  <data name="Bundle_MissingIdent" xml:space="preserve">
    <value>Missing bundle ident</value>
  </data>
  <data name="Bundle_MissingOpenBracket" xml:space="preserve">
    <value>Missing '{{'. Found '{0}'</value>
  </data>
  <data name="Container_IsValidContainerAddress" xml:space="preserve">
    <value>Invalid container address '{0}'</value>
  </data>
  <data name="Listener_UnknownOscPacketType" xml:space="preserve">
    <value>Unknown osc packet type '{0}'</value>
  </data>
  <data name="MidiMessage_NotAMidiMessage" xml:space="preserve">
    <value>Not a midi message '{0}'</value>
  </data>
  <data name="OscAddress_CannotMatch2AddressPatterns" xml:space="preserve">
    <value>Cannot match 2 address patterns</value>
  </data>
  <data name="OscAddress_CannotMatchNonLiteral" xml:space="preserve">
    <value>{0} cannot match non literal address parts</value>
  </data>
  <data name="OscAddress_NotAValidOscAddress" xml:space="preserve">
    <value>The address '{0}' is not a valid osc address</value>
  </data>
  <data name="OscAddress_UnexpectedMatch" xml:space="preserve">
    <value>Unexpected match</value>
  </data>
  <data name="OscAddress_UnknownAddressPart" xml:space="preserve">
    <value>Unknown address part '{0}'</value>
  </data>
  <data name="OscColor_ChannelInvalidValue" xml:space="preserve">
    <value>The {0} channel has a value of {1}, color channel values must be in the range {2} to {3}</value>
  </data>
  <data name="Parser_ArgumentEmpty" xml:space="preserve">
    <value>Argument is empty</value>
  </data>
  <data name="Parser_ArgumentUnexpectedEndOfMessage" xml:space="preserve">
    <value>Unexpected end of message while parsing argument '{0}'</value>
  </data>
  <data name="Parser_InvalidAddress" xml:space="preserve">
    <value>Invalid address</value>
  </data>
  <data name="Parser_InvalidBlobStringLength" xml:space="preserve">
    <value>Invalid blob string length</value>
  </data>
  <data name="Parser_InvalidColor" xml:space="preserve">
    <value>Invalid color '{0}'</value>
  </data>
  <data name="Parser_InvalidPacket" xml:space="preserve">
    <value>An error occured while parsing an osc packet</value>
  </data>
  <data name="Parser_InvalidSegmentLength" xml:space="preserve">
    <value>The packet length is not the correct size</value>
  </data>
  <data name="Parser_MalformedArrayArgument" xml:space="preserve">
    <value>Malformed array '{0}'</value>
  </data>
  <data name="Parser_MalformedObjectArgument" xml:space="preserve">
    <value>Malformed object '{0}'</value>
  </data>
  <data name="Parser_MalformedObjectArgument_MissingType" xml:space="preserve">
    <value>Malformed object '{0}', missing type name</value>
  </data>
  <data name="Parser_MalformedStringArgument" xml:space="preserve">
    <value>Malformed string argument '{0}' </value>
  </data>
  <data name="Parser_MalformedTypeTag" xml:space="preserve">
    <value>Malformed type tag</value>
  </data>
  <data name="Parser_MissingAddressEmpty" xml:space="preserve">
    <value>Address was empty</value>
  </data>
  <data name="Parser_MissingAddressTerminator" xml:space="preserve">
    <value>Address terminator could not be found</value>
  </data>
  <data name="Parser_MissingArgumentTerminator" xml:space="preserve">
    <value>Terminator could not be found while parsing argument '{0}'</value>
  </data>
  <data name="Parser_MissingArrayEndChar" xml:space="preserve">
    <value>Expected ']'</value>
  </data>
  <data name="Parser_MissingComma" xml:space="preserve">
    <value>No comma found</value>
  </data>
  <data name="Parser_MissingObjectEndChar" xml:space="preserve">
    <value>Expected '}'</value>
  </data>
  <data name="Parser_MissingStringEndChar" xml:space="preserve">
    <value>Expected '"'</value>
  </data>
  <data name="Parser_MissingTypeTag" xml:space="preserve">
    <value>Type tag terminator could not be found</value>
  </data>
  <data name="Parser_UnexpectedEndOfMessage" xml:space="preserve">
    <value>Unexpected end of message</value>
  </data>
  <data name="Parser_UnknownArgumentType" xml:space="preserve">
    <value>Unknown argument type '{0}' on argument '{1}'</value>
  </data>
  <data name="Parser_UnknownObjectType" xml:space="preserve">
    <value>Unknown object type '{0}'</value>
  </data>
  <data name="Receiver_ErrorWhileWaitingForMessage" xml:space="preserve">
    <value>An unexpected error occured while waiting for a message</value>
  </data>
  <data name="Receiver_NotMulticastAddress" xml:space="preserve">
    <value>The suppied address must be a multicast address</value>
  </data>
  <data name="Receiver_SocketIsClosed" xml:space="preserve">
    <value>The receiver socket has been disconnected</value>
  </data>
  <data name="Socket_AddressFamilyIncompatible" xml:space="preserve">
    <value>Both local and remote must belong to the same address family</value>
  </data>
  <data name="Socket_AlreadyOpenOrNotClosed" xml:space="preserve">
    <value>The socket is already open or is not fully closed</value>
  </data>
  <data name="Socket_LocalPortOutOfRange" xml:space="preserve">
    <value>The valid range for local port numbers is 1 to 65535 or 0 for a dynamically assigned port</value>
  </data>
  <data name="Socket_PortOutOfRange" xml:space="preserve">
    <value>The valid range for port numbers is 1 to 65535</value>
  </data>
  <data name="Socket_RemotePortOutOfRange" xml:space="preserve">
    <value>The valid range for remote port numbers is 1 to 65535</value>
  </data>
  <data name="Socket_UnsupportedAddressFamily" xml:space="preserve">
    <value>Unsupported address family '{0}'</value>
  </data>
  <data name="TimeTag_InvalidString" xml:space="preserve">
    <value>Invalid osc-timetag string '{0}'</value>
  </data>
</root>